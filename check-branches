#!/bin/zsh
source common

# Check if a directory is provided as a command-line argument
if [ $# -gt 0 ]; then
  dirs=("$@")
else
  dirs=(*)
fi

# Loop through each directory in the current directory
printf "%-50s %-9s %-9s %s\n" "Directory" "Clean" "Diff" "Branch name" 
printf "%-50s %-9s %-9s %s\n" "--------------------------------------------------" "---------" "---------" "-----------"
for dir in $dirs; do
  # Check if the directory is a git repository
  if [ -d "$dir/.git" ]; then
    # Enter the subdirectory
    cd "$dir" || continue

    # Print out the results in a formatted manner
    printf "%-50s " "$dir"

    # Fetch the latest changes from the remote repository
    git fetch origin > /dev/null 2>&1
    
    # Get the current branch name
    branch=$(git rev-parse --abbrev-ref HEAD)

    # Check the working directory status
    st=""
    if [ -z "$(git status --untracked-files=no --porcelain)" ]; then 
      # Working directory is clean
      st="${GREEN}${ICON_CHECK}${NC}"
    else 
      # There are uncommitted changes
      st="${RED}${ICON_CROSS}${NC}"
    fi

    # Print out the results in a formatted manner
    printf "%-20s " "$st"
    
    # Get the number of commits the local branch is behind the remote branch
    behindCount=$(git rev-list --count HEAD..origin/$branch 2>/dev/null)
    behind=""

    # Set the behind status with appropriate color
    if [ "$behindCount" != "0" ]; then
      behind="${RED}${ICON_ARROW_RIGHT_DOWN}${behindCount}${NC}"
    fi

    # Get the number of commits the local branch is behind the remote branch
    aheadCount=$(git rev-list --count origin/$branch..HEAD 2>/dev/null)
    ahead=""

    # Set the ahead status with appropriate color
    if [ "$aheadCount" != "0" ]; then
      ahead="${YELLOW}${ICON_ARROW_RIGHT_UP}${aheadCount}${NC}"
    else
    fi

    # Add a space if both ahead and behind are present
    difference=""

    if [ -z "$ahead" ] && [ -z "$behind" ]; then
      difference="${GREEN}${ICON_CHECK}${NC}"
    else
      difference="${behind}${ahead}"
    fi

    # Print out the results in a formatted manner
    printf "%-20s " "$difference"

    # Set color for branch name
    if [ "$branch" = "main" ]; then
      branch="${GREEN}${branch}${NC}"
    else
      branch="${RED}${branch}${NC}"
    fi

    # Print out the results in a formatted manner
    printf "%s\n" "$branch" 
    
    # Return to the parent directory
    cd ..
  fi
done